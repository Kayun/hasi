/*
Stylus variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon_home_width;
}

The large array-like variables contain all information about a single icon
$icon_home = x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet = width height image $spritesheet_sprites;
*/
$attention_name = 'attention';
$attention_x = 64px;
$attention_y = 40px;
$attention_offset_x = -64px;
$attention_offset_y = -40px;
$attention_width = 26px;
$attention_height = 26px;
$attention_total_width = 103px;
$attention_total_height = 72px;
$attention_image = '/hasi/public//assets/images/sprite.png';
$attention = 64px 40px -64px -40px 26px 26px 103px 72px '/hasi/public//assets/images/sprite.png' 'attention';
$enter_name = 'enter';
$enter_x = 35px;
$enter_y = 0px;
$enter_offset_x = -35px;
$enter_offset_y = 0px;
$enter_width = 34px;
$enter_height = 34px;
$enter_total_width = 103px;
$enter_total_height = 72px;
$enter_image = '/hasi/public//assets/images/sprite.png';
$enter = 35px 0px -35px 0px 34px 34px 103px 72px '/hasi/public//assets/images/sprite.png' 'enter';
$person_name = 'person';
$person_x = 69px;
$person_y = 0px;
$person_offset_x = -69px;
$person_offset_y = 0px;
$person_width = 34px;
$person_height = 34px;
$person_total_width = 103px;
$person_total_height = 72px;
$person_image = '/hasi/public//assets/images/sprite.png';
$person = 69px 0px -69px 0px 34px 34px 103px 72px '/hasi/public//assets/images/sprite.png' 'person';
$point_name = 'point';
$point_x = 0px;
$point_y = 0px;
$point_offset_x = 0px;
$point_offset_y = 0px;
$point_width = 35px;
$point_height = 40px;
$point_total_width = 103px;
$point_total_height = 72px;
$point_image = '/hasi/public//assets/images/sprite.png';
$point = 0px 0px 0px 0px 35px 40px 103px 72px '/hasi/public//assets/images/sprite.png' 'point';
$round_arrow_down_name = 'round_arrow_down';
$round_arrow_down_x = 0px;
$round_arrow_down_y = 40px;
$round_arrow_down_offset_x = 0px;
$round_arrow_down_offset_y = -40px;
$round_arrow_down_width = 32px;
$round_arrow_down_height = 32px;
$round_arrow_down_total_width = 103px;
$round_arrow_down_total_height = 72px;
$round_arrow_down_image = '/hasi/public//assets/images/sprite.png';
$round_arrow_down = 0px 40px 0px -40px 32px 32px 103px 72px '/hasi/public//assets/images/sprite.png' 'round_arrow_down';
$round_arrow_right_name = 'round_arrow_right';
$round_arrow_right_x = 32px;
$round_arrow_right_y = 40px;
$round_arrow_right_offset_x = -32px;
$round_arrow_right_offset_y = -40px;
$round_arrow_right_width = 32px;
$round_arrow_right_height = 32px;
$round_arrow_right_total_width = 103px;
$round_arrow_right_total_height = 72px;
$round_arrow_right_image = '/hasi/public//assets/images/sprite.png';
$round_arrow_right = 32px 40px -32px -40px 32px 32px 103px 72px '/hasi/public//assets/images/sprite.png' 'round_arrow_right';
$spritesheet_width = 103px;
$spritesheet_height = 72px;
$spritesheet_image = '/hasi/public//assets/images/sprite.png';
$spritesheet_sprites = $attention $enter $person $point $round_arrow_down $round_arrow_right;
$spritesheet = 103px 72px '/hasi/public//assets/images/sprite.png' $spritesheet_sprites;

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  spriteWidth($icon_home)
}

.icon-email {
  sprite($icon_email)
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
spriteWidth($sprite) {
  width: $sprite[4];
}

spriteHeight($sprite) {
  height: $sprite[5];
}

spritePosition($sprite) {
  background-position: $sprite[2] $sprite[3];
}

spriteImage($sprite) {
  background-image: url($sprite[8]);
}

sprite($sprite) {
  spriteImage($sprite)
  spritePosition($sprite)
  spriteWidth($sprite)
  spriteHeight($sprite)
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of Stylus

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

sprites($spritesheet_sprites);
*/
sprites($sprites) {
  for $sprite in $sprites {
    $sprite_name = $sprite[9];
    .{$sprite_name} {
      sprite($sprite);
    }
  }
}
